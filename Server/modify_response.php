<?php
/*
    Â© Copyright 2025, Little Green Viper Software Development LLC

    LICENSE:

    MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy,
    modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
    CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
/**
    \brief Manage user interactions after user found.
    
    This file manages the access to, and possible modification of, the user record. It requires the user to be logged in, first.
    
    User login is managed by a simple bearer token, generated by either the challenge step, or by a previous record creation step.
    
    The bearer token is also stored in the credential table row. If it does not match, then we assume that this is a "first time login."
    
    For a first time login, we require that the supplied client data (signed by the app), be valid, and contain the previously generated challenge,
    which is also supplied in the session array.
    
    The input to here are POST arguments. There are no GET arguments.
    
    This returns a JSON record, if successful, with the basic user data (not credential data).
*/
require 'vendor/autoload.php';
require_once "./Config.php";

// We will be using a shared HTTP session.
session_start();

// We rely on the WebAuthn library.
use lbuchs\WebAuthn\WebAuthn;

$rawPostData = file_get_contents("php://input");    // Access the POST arguments from the input stream.
$input = json_decode($rawPostData, true);

// POST arguments.
$clientDataJSON = base64_decode($input['clientDataJSON']);          // This is a signed record, with various user data.
$authenticatorData = base64_decode($input['authenticatorData']);    // A record, with any authenticator (YubiKey, etc. Not used for our demo).
$signature = base64_decode($input['signature']);                    // The signature for the record, against the public key.
$credentialId = base64_decode($input['credentialId']);              // We have to have a credential ID. Things go badly, without.

// Session arguments.
$challenge = $_SESSION['modifyChallenge'];  // The challenge sent from the first step (may be binary).
$bearerToken = $_SESSION['bearerToken'];    // Any bearer token supplied to the first step as a GET argument.
$displayName = $_SESSION['displayName'];    // If the user wants to change the display name, it is provided here.
$credo = $_SESSION['credo'];                // If the user wants to change the credo, it is supplied here.
$update = (1 == intval($_SESSION['update']) ? true : false);              // If true, we want to update.

$_SESSION = []; // Clear the poop deck (of poop).

// Access the user credential record, based on the credential ID. We use PDO, for safety.
$pdo = new PDO(Config::$g_db_type.':host='.Config::$g_db_host.';dbname='.Config::$g_db_name, Config::$g_db_login, Config::$g_db_password);
$stmt = $pdo->prepare('SELECT userId, displayName, signCount, bearerToken, publicKey FROM webauthn_credentials WHERE credentialId = ?');
$stmt->execute([$credentialId]);
$row = $stmt->fetch(PDO::FETCH_ASSOC);

$userId = isset($row['userId']) ? $row['userId'] : NULL;

if (empty($row) || empty($userId)) {    // Look for obvious errors. If we didn't get a User ID to check, or there's no response, then game over, man.
    http_response_code(404);
    echo json_encode(['error' => 'Credential not found']);
} elseif (empty($bearerToken) || ($row['bearerToken'] != $bearerToken)) {   // If the bearer token doesn't match, then we need to log in again.
    if (empty($displayName)) {
        $displayName = $row['displayName'];
    }
    
    $signCount = intval($row['signCount']);
    
    $webAuthn = new WebAuthn(Config::$g_relying_party_name, Config::$g_relying_party_uri);
    
    // If there was no signed client data record, with a matching challenge, then game over, man.
    try {
        $success = $webAuthn->processGet(
            $clientDataJSON,
            $authenticatorData,
            $signature,
            $row['publicKey'],
            $challenge,
            $signCount
        );
        
        // Create a new token, as this is a new login. NOTE: This needs to be Base64URL encoded, not just Base64 encoded.
        $bearerToken = base64url_encode(random_bytes(32));  
        
        // Increment the sign count and store the new bearer token.
        $newSignCount = intval($webAuthn->getSignatureCounter());
        $stmt = $pdo->prepare('UPDATE webauthn_credentials SET signCount = ?, bearerToken = ? WHERE credentialId = ?');
        $stmt->execute([$newSignCount, $bearerToken, $credentialId]);
        
        $_SESSION['bearerToken'] = $bearerToken;    // Pass it on, in the session.
        performUpdate($pdo, $stmt, $userId, $bearerToken, $displayName, $credo, false);
    } catch (Exception $e) {
        // Try to clear the token, if we end up here.
        $stmt = $pdo->prepare('UPDATE webauthn_credentials SET bearerToken = NULL WHERE credentialId = ?');
        $stmt->execute([$credentialId]);
        
        http_response_code(401);
        echo json_encode(['error' => $e->getMessage()]);
    }
} elseif (!empty($row) && ($row['bearerToken'] == $bearerToken)) {  // If we are still logged in, and the session is still live, we'll make sure we match the token.
    $_SESSION['bearerToken'] = $bearerToken;    // Keep the chain unbroken.
    performUpdate($pdo, $stmt, $userId, $bearerToken, $displayName, $credo, $update);
} else {
    // Make sure to clear the token, if we end up here.
    $stmt = $pdo->prepare('UPDATE webauthn_credentials SET bearerToken = NULL WHERE credentialId = ?');
    $stmt->execute([$credentialId]);
    http_response_code(403);
    echo json_encode(['error' => 'Token Mismatch']);
}

/***********************/
/**
    Updates the user table with the new values (or simply returns the current values).
    @param string $pdo The PDO instance to be used for the query/update.
    @param string $stmt The PDO statement to be used for the query/update.
    @param string $userId The user ID from the credentials.
    @param string $displayName The user's display name (if being changed). NOTE: This should be set for any change, even if this string is not changed from what's in the DB.
    @param string $credo The user's credo string (if being changed).
    @return the data provided, as a Base64URL-encoded string.
 */
function performUpdate($pdo, $stmt, $userId, $bearerToken, $displayName, $credo, $update) {
    $stmt = $pdo->prepare('SELECT displayName, credo FROM passkeys_demo_users WHERE userId = ?');
    $stmt->execute([$userId]);
    $row = $stmt->fetch(PDO::FETCH_ASSOC);

    if (!empty($bearerToken) && !empty($row)&& !empty($row['displayName'])) {
        if ($update) {
            if (empty($displayName)) {
                $displayName = $row['displayName'];
            }
            
            if (empty($credo)) {
                $credo = '';
            }
            
            if (($displayName != $row['displayName']) || ($credo != $row['credo'])) {
                $stmt = $pdo->prepare('UPDATE passkeys_demo_users SET displayName = ?, credo = ? WHERE userId = ?');
                $stmt->execute([$displayName, $credo, $userId]);
                $row = ['displayName' => $displayName, 'credo' => $credo];
            }
        }
        
        header('Content-Type: application/json');
        echo json_encode(['displayName' => $row['displayName'], 'credo' => $row['credo'], 'bearerToken' => $bearerToken]);
    } else {
        http_response_code(404);
        echo json_encode(['error' => 'User not found']);
    }
}
